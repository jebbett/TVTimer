/**
 *  TVTimer
 *
 *  Copyright 2016 Jake Tebbett
 *  Credit to jgravert - Idea, Testing, Hardware
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 * 
 * VERSION CONTROL - USER
 * #########################
 *
 *  v0.1 - Beta semi-stable version
 *  v0.2 - Recurring quota fix attempt
 *  v0.3 - Fixed bug turning light back off
 *	v0.4 - Recurring quota fix attempt #2
 *	v0.5 - Recurring quota - moved check from parent to child app - fix attempt #3
 *	v0.6 - Fixed Smarthings Unschedule bug
 *	v0.7 - Fixed user switching bug, moved keypad light response to master
 *	v0.8 - Added [ACTIVE] against active user in app balance screen
 *	v0.9 - Added additional logging points
 *	v0.10- Updated logging reporting to include quota last reset, current time and reset due.
 */
 
definition(
    name: "TVTimer User",
    namespace: "jebbett",
    author: "Jake Tebbett",
    description: "Quota Management App",
    category: "My Apps",

    parent: "jebbett:TVTimer Manager",
    iconUrl: "https://raw.githubusercontent.com/jebbett/TVTimer/master/tvtimer256-01.png",
    iconX2Url: "https://raw.githubusercontent.com/jebbett/TVTimer/master/tvtimer256-01.png",
    iconX3Url: "https://raw.githubusercontent.com/jebbett/TVTimer/master/tvtimer256-01.png")


preferences {
    page name: "mainPage", title: "User Details", install: false, uninstall: true
}

def installed() {
    log.debug "Installed with settings: ${settings}"
    initialize()
}

def updated() {
    log.debug "Updated with settings: ${settings}"
    unschedule()
    initialize()
}

def initialize() {
    // If no quota set, set it.
    if (state.currentSecs==null){
    	resetQuota()
    }

    
}


// main page to select lights, the action, and turn on/off times
def mainPage() {
    dynamicPage(name: "mainPage", uninstall: true, install: true) {
     	
        section() {
                label title: "Name", defaultValue: app.label, required: true
                if(state.currentSecs != null){
                	if(state.checkQ){
						paragraph "${app.label} is [ACTIVE] with about ${(state.currentSecs/60).toInteger()} minutes remaining until next reset"
    				}else{
        				paragraph "${app.label} is [INACTIVE] with about ${(state.currentSecs/60).toInteger()} minutes remaining until next reset"
        			}
				}
        }
    
    section("User Settings") {
            input(name: "quotaMins", type: "number", title: "Quota Minutes", defaultValue: "60", required:true)
            input "swResetQ", "bool", title: "Force quota reset", required: false, defaultValue: false, submitOnChange: true, refreshAfterSelection: true
            if (swResetQ){state.currentSecs = quotaMins * 60}
            input(name: "pin" , title: "PIN Code", type: "number", range: "0000..9999", required: true)
            paragraph "PIN should be four digits. Shorter PINs will be padded with leading zeroes. (42 becomes 0042)"
           
                   
    }
    
    section("Allowed Times") {
            input "dayOfWeek1", "enum", title: "Day of the week:", multiple: false, submitOnChange: true, required: false,
			options: ['All Week','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday','Mon to Fri','Sat to Sun','Sun to Thurs','Fri to Sat']
            if(dayOfWeek1){
            	input "timeS1", "time", title: "Start Time", required: true
            	input "timeF1", "time", title: "Finish Time", required: true
            
            input "dayOfWeek2", "enum", title: "Day of the week:", multiple: false, submitOnChange: true, required: false,
			options: ['All Week','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday','Mon to Fri','Sat to Sun','Sun to Thurs','Fri to Sat']
            if(dayOfWeek2){
            	input "timeS2", "time", title: "Start Time", required: true
            	input "timeF2", "time", title: "Finish Time", required: true
            }
            input "dayOfWeek3", "enum", title: "Day of the week:", multiple: false, submitOnChange: true, required: false,
			options: ['All Week','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday','Mon to Fri','Sat to Sun','Sun to Thurs','Fri to Sat']
            if(dayOfWeek3){
            	input "timeS3", "time", title: "Start Time", required: true
            	input "timeF3", "time", title: "Finish Time", required: true
            }
            input "dayOfWeek4", "enum", title: "Day of the week:", multiple: false, submitOnChange: true, required: false,
			options: ['All Week','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday','Mon to Fri','Sat to Sun','Sun to Thurs','Fri to Sat']
            if(dayOfWeek4){
            	input "timeS4", "time", title: "Start Time", required: true
            	input "timeF4", "time", title: "Finish Time", required: true
            }
            input "dayOfWeek5", "enum", title: "Day of the week:", multiple: false, submitOnChange: true, required: false,
			options: ['All Week','Weekdays','Weekend','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']
            if(dayOfWeek5){
            	input "timeS5", "time", title: "Start Time", required: true
            	input "timeF5", "time", title: "Finish Time", required: true
            }
            input "dayOfWeek6", "enum", title: "Day of the week:", multiple: false, submitOnChange: true, required: false,
			options: ['All Week','Weekdays','Weekend','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']
            if(dayOfWeek6){
            	input "timeS6", "time", title: "Start Time", required: true
            	input "timeF6", "time", title: "Finish Time", required: true
            }
            input "dayOfWeek7", "enum", title: "Day of the week:", multiple: false, submitOnChange: true, required: false,
			options: ['All Week','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday','Mon to Fri','Sat to Sun','Sun to Thurs','Fri to Sat']
            if(dayOfWeek7){
            	input "timeS7", "time", title: "Start Time", required: true
            	input "timeF7", "time", title: "Finish Time", required: true
            }
            }
    	}	
    }
}


// #################################### INPUTS ####################################
//Returns the PIN padded with zeroes to 4 digits
private String getPIN(){
	return settings.pin.value.toString().padLeft(4,'0')
}

// Check Quota on correct PIN
def codeEntryHandler(evt){
    parent.logWriter ("[PINPAD] Caught code entry event! ${evt.value.value}")
    def codeEntered = evt.value as String
    def data = evt.data as String
    def correctCode = getPIN()
    def mode = ''
    
    if (data == '0') mode = 'off'		//Off
    else if (data == '3') mode = 'on'	//Away
    else if (data == '1') mode = 'on'	//Stay
    else if (data == '2') mode = 'on'	//Night
    else {
    	parent.logWriter ("[PINPAD] Unexpected arm mode sent by keypad!: "+data)
        return []
        }    
    if (codeEntered == correctCode && mode== "on") {
    	parent.logWriter ("[PINPAD] Correct PIN entered - Turning On")
        parent.keypad.acknowledgeArmRequest(data)
        state.checkQ = true
        checkQuota()
        
    }
    else if (codeEntered == correctCode && mode== "off") {
    	parent.logWriter ("[PINPAD] Correct PIN entered - Turning Off.")
        parent.keypad.acknowledgeArmRequest(data)
        stopQuota()
        parent.switchOff()
    }
    else
    {
    	parent.logWriter ("[PINPAD] Invalid PIN")
    	parent.keypad.sendInvalidKeycodeResponse()
    }
}

// Check Quota on switch
def switchOn(evt) {
	if(evt.value == "on"){
    state.checkQ = true
    checkQuota()
    }
    else if (evt.value == "off"){
    	stopQuota()
        parent.switchOff()
        }
}


// #################################### CHECKS EVERYTHING ####################################

// Make sure both quota available and an eligable timeband is active.
def checkQuota() {

	// Ensure check quota request is valid, if not exit.
    if(!state.checkQ){return}
    
	// Unschedule any in progress schedules
	state.checkQ = false	//unschedule("checkQuota")
    
    // Check to see if quota due for reset
    
    //def timeString = new Date(unixTS+ location.timeZone.rawOffset ).format("yyyy-MM-dd HH:mm")
    
    def thisIsToday = timeToday("00:00",location.timeZone).time as long
    def thisIsWhenLastReset = parent.checkQuotaReset() as long
    def resetDayz = parent.resetDays*86400000 as long
    def thisIsWhenDue = thisIsWhenLastReset + resetDayz as long
    
    if ((timeToday("00:00",location.timeZone).time) >= thisIsWhenDue){
    	resetQuota()
    	parent.recurringQuotaReset(app.label)
    	parent.logWriter("[QUOTA] Have Reset Recurring Quota")
    }else{
        parent.logWriter("[QUOTA] Not Reset! Last Reset Was: ${new Date(thisIsToday).format("yyyy-MM-dd HH:mm")}, currently time is ${new Date(now()+ location.timeZone.rawOffset).format("yyyy-MM-dd HH:mm")} next one due ${new Date(thisIsWhenDue).format("yyyy-MM-dd HH:mm")}.")
    }
        
    // ################################### REMOVED     state.checkQ = false	//unschedule("checkQuota")
        
    // Update quota
    updateQuota()
    
    // Check if quota should start deductions
    def availableQuota = state.currentSecs.toInteger()
	if(availableQuota > 0  && !parent.swOff){
    parent.logWriter("[CHECK] Quota Available")	
        if(okTimeSlot()){
        	parent.logWriter("[CHECK] Timeband OK")	
        	// Do this if ok to use quota
            state.startTimer = (now()/1000).toInteger()
            parent.switchOn(app.label)
            //return to exit before stopQuota
            return
    	}
    }
	stopQuota()
    parent.switchOff()
}

// #################################### UPDATES QUOTA ####################################

// Work out quota balances
def updateQuota() {
	if(state.startTimer == null){
    
    	parent.logWriter ("[QUOTA] No quota being used currently - do nothing.")
        
    }else{
    	
        // Only deduct time if "Free Time" isn't set.
        if(!parent.swFree) {state.currentSecs = state.currentSecs - ((now()/1000).toInteger() - state.startTimer)}
        
        //Reset start time
        state.startTimer = null
        
        // Tidy to zero if SmartThings has over deducted 
        if (state.currentSecs < 0) {state.currentSecs = 0}
        
        parent.logWriter ("[QUOTA] Remaining seconds left: $state.currentSecs")       
	}
}

// #################################### CHECK ELIGABLE TIME ####################################

def okTimeSlot() {	
    
	if(!dayOfWeek1) {
    	scheduleReCheck('23:59:59')
    	return true}
        
    if(okTime(dayOfWeek1, timeS1, timeF1)) {
        scheduleReCheck(timeF1)
    	return true}
    
    if(okTime(dayOfWeek2, timeS2, timeF2)) {
    	scheduleReCheck(timeF2)
    	return true}
    
    if(okTime(dayOfWeek3, timeS3, timeF3)) {
    	scheduleReCheck(timeF3)
    	return true}
    
    if(okTime(dayOfWeek4, timeS4, timeF4)) {
    	scheduleReCheck(timeF4)
    	return true}
    
    if(okTime(dayOfWeek5, timeS5, timeF5)) {
    	scheduleReCheck(timeF5)
        return true}
    
    if(okTime(dayOfWeek6, timeS6, timeF6)) {
    	scheduleReCheck(timeF6)
        return true}
    
    if(okTime(dayOfWeek7, timeS7, timeF7)) {
    	scheduleReCheck(timeF7)
        return true}
        
    return false
}

// Check active timeband
def okTime(aDate, aStart, aFinish) {

Calendar cal = Calendar.getInstance()

	if(cal.get(Calendar.DAY_OF_WEEK)==1 && aDate in ['All Week','Sat to Sun','Sunday','Sun to Thurs'] && now() >= timeToday(aStart,location.timeZone).time && now() <= timeToday(aFinish,location.timeZone).time){
        return true}
    else if(cal.get(Calendar.DAY_OF_WEEK)==2 && aDate in ['All Week','Mon to Fri','Monday','Sun to Thurs'] && now() >= timeToday(aStart,location.timeZone).time && now() <= timeToday(aFinish,location.timeZone).time){
        return true}
    else if(cal.get(Calendar.DAY_OF_WEEK)==3 && aDate in ['All Week','Mon to Fri','Tuesday','Sun to Thurs'] && now() >= timeToday(aStart,location.timeZone).time && now() <= timeToday(aFinish,location.timeZone).time){
        return true}
    else if(cal.get(Calendar.DAY_OF_WEEK)==4 && aDate in ['All Week','Mon to Fri','Wednesday','Sun to Thurs'] && now() >= timeToday(aStart,location.timeZone).time && now() <= timeToday(aFinish,location.timeZone).time){
        return true}
    else if(cal.get(Calendar.DAY_OF_WEEK)==5 && aDate in ['All Week','Mon to Fri','Thursday','Sun to Thurs'] && now() >= timeToday(aStart,location.timeZone).time && now() <= timeToday(aFinish,location.timeZone).time){
        return true}
    else if(cal.get(Calendar.DAY_OF_WEEK)==6 && aDate in ['All Week','Mon to Fri','Friday','Fri to Sat'] && now() >= timeToday(aStart,location.timeZone).time && now() <= timeToday(aFinish,location.timeZone).time){
        return true}
    else if(cal.get(Calendar.DAY_OF_WEEK)==7&& aDate in ['All Week','Sat to Sun','Saturday','Fri to Sat'] && now() >= timeToday(aStart,location.timeZone).time && now() <= timeToday(aFinish,location.timeZone).time){
        return true}
    else{
    	return false}
}


// #################################### SCHEDULE RECHECK ####################################

def scheduleReCheck(timeEnd) {

	// Number of seconds in quota and to end of timeband
    def secsToEndBand = ((timeToday(timeEnd,location.timeZone).time/1000)+60)-(now() /1000).toInteger()+1
    def secsInQuota = state.currentSecs

    //schedule next recheck
	if(secsToEndBand >= secsInQuota){
    	runIn(secsInQuota, checkQuota, [overwrite: true])
        state.checkQ = true
       	parent.logWriter ("[SCHEDULE] Quota available less than time band end, so will re-check in $secsInQuota seconds.")
    }else{
    	runIn(secsToEndBand, checkQuota, [overwrite: true])
        state.checkQ = true
    	parent.logWriter ("[SCHEDULE] Timeband will be hit before quota runs out, , so will re-check in $secsToEndBand seconds.")	
    }
}


// #################################### ADHOC SCRIPTS ####################################

def stopQuota() {
    parent.logWriter ("[STATE] Stop command sent.")
    state.checkQ = false	//unschedule("checkQuota")
	updateQuota()
}

// #################################### ADHOC SCRIPTS ####################################

// To return quota to parent app, for phone app.
def returnQuota () {

	def avQuota = "Checking"

	if(state.currentSecs != null){
    	def availableQuotaMins = (state.currentSecs/60).toInteger()
        
        
    	if(state.checkQ){
			avQuota = "$app.label has about $availableQuotaMins minutes remaining [ACTIVE]" as String
    	}else{
        	avQuota = "$app.label has about $availableQuotaMins minutes remaining" as String
        }
        
    return avQuota
    
    }else{return "$app.label has 0 minutes remaining"}
}

def resetQuota(){
	state.currentSecs = quotaMins * 60
    parent.logWriter("[QUOTA] Quota Reset to ${state.currentSecs}")
    return
}
