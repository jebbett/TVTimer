/**
 *  TVTimer
 *
 *  Copyright 2016 Jake Tebbett
 *  Credit to jgravert - Idea, Testing, Hardware
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 * 
 * VERSION CONTROL - MANAGER
 * #########################
 *
 *  v0.1 - Beta semi-stable version
 *  v0.2 - Recurring quota fix attempt
 * 	v0.3 - Move checking quota reset due to app, manager still re-sets other apps, changed icon provided by jgravert
 *	v0.4 - Removed redundant code
 *	v0.5 - Fixed Smarthings Unschedule bug
 *
 */

definition(
    name: "TVTimer Manager",
    namespace: "jebbett",
    author: "Jake Tebbbett",
    description: "TV/Device Quota Management App",
    category: "My Apps",
    iconUrl: "https://raw.githubusercontent.com/jebbett/TVTimer/master/tvtimer256-01.png",
    iconX2Url: "https://raw.githubusercontent.com/jebbett/TVTimer/master/tvtimer256-01.png",
    iconX3Url: "https://raw.githubusercontent.com/jebbett/TVTimer/master/tvtimer256-01.png")


preferences {
	page(name: "mainPage")
    page(name: "balancePage")
    page(name: "settingsPage")
}

def mainPage() {

	if (state.debugLogging == null) 	{ state.debugLogging = false }
    
    dynamicPage(name: "mainPage", install: true, uninstall: true,submitOnChange: true) {
        
        section() {	
            input "swOff", "bool", title: "All Off", required: false, defaultValue: false, submitOnChange: true, refreshAfterSelection: true
            input "swFree", "bool", title: "Free Time", required: false, defaultValue: false, submitOnChange: true,refreshAfterSelection: true
         	
            href(name: "usersBal",
                 title: "Users Balance Remaining",
                 required: false,
                 page: "balancePage",
                 description: "view users remaining balances")
        }
        section(title: "Users") {}
         
        section() {
        
            app(name: "childapp", appName: "TVTimer User", namespace: "jebbett", title: "Create New User", multiple: true)
        	href(name: "advSets", title: "Advanced Settings", required: false, page: "settingsPage")
        }
    }
}

def settingsPage(){
	dynamicPage(name: "balancePage", install: false, uninstall: false, submitOnChange: true) {
        
		section("Inputs") {
        	input "trigger1", "capability.switch", title:"TESTING ONLY", multiple: false, required: false
            input "keypad", "capability.lockCodes", title: "Keypad Input", multiple: false, required: false
            input "output1", "capability.switch", title:"Switch To Control", multiple: false, required: false
            input(name: "swOffIn" , title: "Delay Switch Off (Seconds)", type: "number", range: "1..300", defaultValue: "10", required: true)
            input(name: "resetDays", type: "number", title: "Reset Quota After (Days)", defaultValue: "1", range: "1..31", required: true, description: "days")
        }
        section("Automatically Stop On Low Power (Optional)") {     
            input(name: "meter", type: "capability.powerMeter", title: "When This Meter:", required: false, multiple: false, description: null)
            input(name: "meterPwr", type: "number", title: "Drops Below This Many Watts:", defaultValue: "5", required: true, description: "watts")
			input(name: "lowPwrOffIn" , title: "For This Many Seconds:", type: "number", range: "1..3600", defaultValue: "30", required: true)
        }
        
        // Enables logging debug only when enabled
        section(title: "Debug Logging") {
       		paragraph "If you experiencing issues please enable logging to help troubleshoot"
            input "debugLogging", "bool", title: "Debug Logging", required: false, defaultValue: false, refreshAfterSelection: true
            if (debugLogging) { 
            	state.debugLogging = true 
                logWriter("Debug Logging is ${state.debugLogging.toString().toUpperCase()}")
            }
            else { 
            	state.debugLogging = false 
            	logWriter("Debug Logging is ${state.debugLogging.toString().toUpperCase()}")    
            }
    	}
	}
}

def balancePage(){
	dynamicPage(name: "balancePage", install: false, uninstall: false, submitOnChange: false) {
        
        section(title: "Balance Remaining") {
        	childApps.each { child ->
            	def childQuota = child.returnQuota()
    			paragraph "${child.label} has ${childQuota} minutes remaining"
    		}
		}
	}
}


// #################################### SYSTEM ####################################
def installed() {
    log.debug "Installed with settings: ${settings}"
    initialize()
}

def updated() {
    log.debug "Updated with settings: ${settings}"
    unsubscribe()
    initialize()
}

def initialize() {
    subscribe(trigger1, "switch", childSwitch)
    subscribe(keypad, "codeEntered", childCodeEntryHandler)
    subscribe(meter, "power", meterHandler)
    
    // State Apps that are configured
    log.debug "There are ${childApps.size()} child smartapps"
    childApps.each {child ->
        log.debug "Child app: ${child.label}"
    }
    
    // If "All Off" stop everything
    if(swOff){
    	state.stopQuota = true
        stopAllQuotas()}
    
    //state.lastReset = "145439640000" //####### UNCOMMENT TO FORCE NEW DAY - THEN PRESS DONE IN APP
}

// #################################### LOGGING ####################################
private def logWriter(value) {
	if (state.debugLogging) {
        log.debug "${value}"
    }	
}

// #################################### INPUTS ####################################

// Pass test switch to all child apps - THIS CAN BE DELETED IF SWITCH REMOVED
def childSwitch(evt) {
childApps.each { child ->
	if(child.label == "Jake"){child.switchOn(evt)}
    }
	return
}

// Pass keypad entry to all child apps to proccess
def childCodeEntryHandler(evt){
	childApps.each { child ->
    	child.codeEntryHandler(evt)
    }
	return
}

// #################################### OUTPUTS ####################################

//Switch on and cancel any pending switch offs
def switchOn(childLabel) {
	settings."output1"?.on()
    keypad?.setArmedAway()
    logWriter("[OUTPUT] Switch turned on")
    // cancel all the other child apps
    childApps.each { child ->
    	if (child.label != childLabel){
           	child.stopQuota()
        }
    }
    state.switchOffOk = false //unschedule("switchOffInX")
}

//Ask to switch off in 10 seconds
def switchOff() {
	logWriter("[OUTPUT] Switching off if not cancelled")
	runIn(swOffIn, switchOffInX, [overwrite: true])
    state.switchOffOk = true
}

//Actually switch off
def switchOffInX() {
	if(state.switchOffOk){
	    settings."output1"?.off()
        keypad?.setDisarmed()
        logWriter("[OUTPUT] Switched turned off")
	}
}



// #################################### LOW POWER ####################################

// Check if power drops below defined value, if it does turn off and cancel quota in 30 seconds.
def meterHandler(evt) {
	def meterValue = evt.value as double
	def thresholdValue = meterPwr as int
	if (meterValue < thresholdValue) {
		logWriter("${meter} reported energy consumption below ${meterPwr} @ ${meterValue}.")
		runIn(lowPwrOffIn, stopAllQuotas, [overwrite: true])
        state.stopQuota = true
	}
    else
    {
    	state.stopQuota = false	//unschedule("stopAllQuotas")
    }
}

// Stop all quota's on all apps
def stopAllQuotas(){
	if(state.stopQuota){
		childApps.each { child ->
    		child.stopQuota()
    	}
	}
}

// #################################### RESET QUOTAS ####################################

// Recurring Quota Reset
def recurringQuotaReset(childApp) {
    childApps.each { child ->
    	if (child.label != childLabel){
           	child.resetQuota()
        }
    }
    state.lastReset = timeToday("00:00",location.timeZone).time
}

def checkQuotaReset(){
	if (state.lastReset == null){
       	state.lastReset = timeToday("00:00",location.timeZone).time
    }
	return state.lastReset as long
}